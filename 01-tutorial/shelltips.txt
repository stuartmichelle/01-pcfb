To redirect output to a file use >
When you want to append an existing file instead of overwriting it, use >>

Redirect the output of the following command to a new file (files.txt)

ls -l ../02-examples/*.seq > files.txt

This created a files.txt file in this directory that has the output of the ls -l command as contents. - this could be helpful when trying to make a list for cstacks using the old method.  Instead of keeping the samples files around, just make a list of them and then save that file.

cat will show ALL of the contents of a file, less shows just a little bit...

cat ../02-examples/FEC00001_1.seq 

Output:
MacBook (master) 01-tutorial $ cat ../02-examples/FEC00001_1.seq
>Fe_MM1_01A01
TCCTTGAAAGATGTACTACCCTCAACAAGAAGATGGACATCGCAAACTTG
CGCTTTAAAGTCGTTATTTTACATCTGTTTGTCTTCTATCTCGCCTCGAG
GGCGGAATCAATACCCGCGGGACGATGGAATATGCGCCTTATGGACTACA
TGATACGCAATGACAATGATGAAGAGGGATTCAAAAAGGAGCGGGGAGTC
AGAGGACAGTGCTTGTACACATATTTGGAACTGGAATCTAAGTCGACCAA
AGCGGCGACTGAAGCTGTGCATAACCTTGCGGGATGGGAGGAACTAAGCC
AAGCGGATTCACGGTACGCGGCTTTGGACGAAGCTTACAACAAGTACAGC
GATGTCGTAAAACAGAAAATTGATCCCATAGAGGAAGCACAGGGACTTAA
CGAAATTGCACCCGTCAAGAACAAGATCATCGATATCAAAGAATATCAGC
GAAACATGACGAAGGCTATGTTGCAAATGGTCAAGTGGGCGGAAAAAAAC
C


cat 2 files at once...

cat ../02-examples/FEC00001_1.seq  ../02-examples/FEC00002_1.seq

Output:
MacBook (master) 01-tutorial $ cat ../02-examples/FEC00001_1.seq  ../02-examples/FEC00002_1.seq
>Fe_MM1_01A01
TCCTTGAAAGATGTACTACCCTCAACAAGAAGATGGACATCGCAAACTTG
CGCTTTAAAGTCGTTATTTTACATCTGTTTGTCTTCTATCTCGCCTCGAG
GGCGGAATCAATACCCGCGGGACGATGGAATATGCGCCTTATGGACTACA
TGATACGCAATGACAATGATGAAGAGGGATTCAAAAAGGAGCGGGGAGTC
AGAGGACAGTGCTTGTACACATATTTGGAACTGGAATCTAAGTCGACCAA
AGCGGCGACTGAAGCTGTGCATAACCTTGCGGGATGGGAGGAACTAAGCC
AAGCGGATTCACGGTACGCGGCTTTGGACGAAGCTTACAACAAGTACAGC
GATGTCGTAAAACAGAAAATTGATCCCATAGAGGAAGCACAGGGACTTAA
CGAAATTGCACCCGTCAAGAACAAGATCATCGATATCAAAGAATATCAGC
GAAACATGACGAAGGCTATGTTGCAAATGGTCAAGTGGGCGGAAAAAAAC
C
>Fe_MM1_01A02
CTAATTACTACTACTTCACTTGTTTAAAATTTTAAATTAAGTTTTAAAAA
ATAAGAAAAATGGGTCGTTTGCCCACCAAGACGTCCAAGACGTACTCGAC
GCCTCGTCGTCCCTTCGAGAAGGAGCGTTTGGATCAGGAGTTGAAGCTTA
TCGGCGAATTCGGTCTTCGCAACAAACGCGAAGTCTGGCGCGTCAAACTC
GCCCTCGCCAAGATCCGTAAATCCGCTCGTGTCCTGCTCACGCTCGAGGA
AAAGCACCCGAGAAGACTCTTCGAAGGTAACGCTCTCCTGCGTCGTTTGG
TGCGTATCGGAGTATTGGACGAGTCCAAAATGAAACTCGATTACGTTTTG
GGTCTCCGCATCGAAGATTTCCCTTGAGCGCCGTCTGCAGACTCAAGTCT
TCAAACTCGGCTTGGCCAAATCTATCCATCACGCTCGCGTTCTGATCCGT
CAGCGTCACATCCGCGTGCGCAAGCAGCTCGTCAACATCCCATCGTTCAT
CGTCCGTCTCGACTCGCAGAAGCACATCGACTTCAGCCTCAAGTCTCCTT
ACGGCGGTGGACCTCCAGGCAGAGTC

can also 

cat ../02-examples/*.seq

and use that to output to a new file instead of on the screen

cat ../02-examples/*.seq > chaetognath.fasta

A new file is in the directory with the above name :)

This could be really helpful in combining process radtags output files.

Extract records from a .csv that only contain the parameters we want.

grep using regular expressions - this example is literal but you can use regex, grep scans the file and displays only the lines that contain the search phrase. Adding -i will tell grep to search for both upper and lowercase in "Toolik Lake"

grep "Toolik Lake" ../02-examples/shaver_etal.csv

Output is huge but starts with:
2003,11-Jul-03,Toolik,Toolik Lake,Control,1,n/a,Betula,20cm x 20cm,ARC ALP,D,ALL,0.00660,0.00048,0.480,13.752,,,,,,,,,,,,,
2003,11-Jul-03,Toolik,Toolik Lake,Control,1,n/a,Betula,20cm x 20cm,BET NAN,D,ALL,0.06239,0.00345,3.454,18.062,,,,,,,,,
2003,11-Jul-03,Toolik,Toolik Lake,Control,1,n/a,Betula,20cm x 20cm,DECID ,D,ALL,0.00071,0.00004,0.037,19.135,,,,,,,,,
2003,11-Jul-03,Toolik,Toolik Lake,Control,1,n/a,Betula,20cm x 20cm,GRAM,GRM,ALL,0.00050,0.00004,0.042,11.905,,,,,,,,,

Because the output is so large, redo the grep and output it to a new file:

grep "Toolik Lake" ../02-examples/shaver_etal.csv > toolik.csv

This new file doesnt' have a header but you can copy and paste one over from the original file using nano, subl, or create a file with only the header and use cat to join it to the new file.

command line regex is different than text editor regex, so instead of \d use [0-9]

Create a file that only has Toolik Lake data from August.

grep "Aug.*Toolik Lake" ../02-examples/shaver_etal.csv > toolik2.csv

if you want to exclude something from your search use -v...find all of the records that do not contain Toolik Lake:

grep -v "Toolik Lake" ../02-examples/shaver_etal.csv

You can use pipe to redirect the output of one command directly to the input of another, here we search for any mention of Toolik in the history

history | grep Toolik

Output:
492  grep "Toolik Lake" ../02-examples/shaver_etal.csv 
  493  grep "Toolik Lake" ../02-examples/shaver_etal.csv > toolik.csv
  496  grep "Aug.*Toolik Lake" ../02-examples/shaver_etal.csv > toolik2.csv
  498  grep -v "Toolik Lake" ../02-examples/shaver_etal.csv git 
  504  history | grep Toolik

  Earlier we searched for two terms, Aug and Toolik using one grep, but if we wanted to make only one of these case sensitive, or invert one search and not the other, we could do it this way:

  grep "Aug" ../02-examples/shaver_etal.csv | grep "Toolik" > toola2.csv

We can search across multiple files by using cat to join the files and then grep to search the whole group:

cat ../02-examples/*.seq | grep ">"

Output - the entire line of text that contains that symbol...
>Fe_MM1_01A01
>Fe_MM1_01A02
>Fe_MM1_01A03
>Fe_MM1_01A04
>Fe_MM1_01A05
>Fe_MM1_01A06
>Fe_MM1_01A07
>Fe_MM1_01A08
>Fe_MM1_01A09
>Fe_MM1_01A10

If you want to see the line with the search pattern AND the name of the file in which it was found, just use a wildcard

MacBook (master) 01-tutorial $ grep ">" ../02-examples/*.seq

Output:
../02-examples/FEC00001_1.seq:>Fe_MM1_01A01
../02-examples/FEC00002_1.seq:>Fe_MM1_01A02
../02-examples/FEC00003_1.seq:>Fe_MM1_01A03
../02-examples/FEC00004_1.seq:>Fe_MM1_01A04
../02-examples/FEC00005_1.seq:>Fe_MM1_01A05
../02-examples/FEC00005_2.seq:>Fe_MM1_01A06
../02-examples/FEC00006_1.seq:>Fe_MM1_01A07
../02-examples/FEC00007_1.seq:>Fe_MM1_01A08
../02-examples/FEC00007_2.seq:>Fe_MM1_01A09
../02-examples/FEC00007_3.seq:>Fe_MM1_01A10

If you just want to see the name of the file and not the line, use -l

MacBook (master) 01-tutorial $ grep -l "GAATTC" ../02-examples/*.seq
../02-examples/FEC00002_1.seq
../02-examples/FEC00004_1.seq
../02-examples/FEC00005_1.seq
../02-examples/FEC00005_2.seq
../02-examples/FEC00006_1.seq

And we can generate a new file with those filenames:
grep -l "GAATTC" ../02-examples/*.seq > has_EcoRI.txt

If you want to count the number of sample files that process_radtags has generated:
ls ./*.fq > fasta.txt | wc fasta.txt

Curl - "see url" will pull info from the web

curl "http://www.rcsb.org/pdb/files/iema.pdb"

Output is long but starts with:
HEADER    FLUORESCENT PROTEIN                     01-AUG-96   1EMA              
TITLE     GREEN FLUORESCENT PROTEIN FROM AEQUOREA VICTORIA                      
COMPND    MOL_ID: 1;                                                            
COMPND   2 MOLECULE: GREEN FLUORESCENT PROTEIN;                                 
COMPND   3 CHAIN: A;                                                            

Save the info to a file:
curl "http://www.rcsb.org/pdb/files/1ema.pdb" > 1ema.pdb

Output:
  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
                                 Dload  Upload   Total   Spent    Left  Speed
100  186k    0  186k    0     0   404k      0 --:--:-- --:--:-- --:--:--  404k

Can do the same thing with an -o operator:
curl "http://www.rcsb.org/pdb/files/1ema.pdb" -o 1ema.pdb


Can also download a range of files in one step, download all of the weather data for August:

curl "http://www.wunderground.com/history/airport/MIA/1992/08/[1-30]/DailyHistory.html?&format=1" >>miamiweather.txt

Output:
[1/30]: http://www.wunderground.com/history/airport/MIA/1992/08/1/DailyHistory.html?&format=1 --> <stdout>
  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
                                 Dload  Upload   Total   Spent    Left  Speed
100  2352    0  2352    0     0    975      0 --:--:--  0:00:02 --:--:--   975

[2/30]: http://www.wunderground.com/history/airport/MIA/1992/08/2/DailyHistory.html?&format=1 --> <stdout>
100  2400    0  2400    0     0   4890      0 --:--:-- --:--:-- --:--:--  6030

Notice that the date is variable [1-30] and that the output is appending into the file instead of overwriting.

Instead of appending to one file, we can create a different file for each day:

curl "http://www.wunderground.com/history/airport/MIA/1979/[01-12]/01/DailyHistory.html?&format=1" -o Miami_1979_#1.txt

If one part of the url is changing and not in a predictable manner, you can form a more complex query:

curl "http://www.rcsb.org/pdb/files/{1ema,1gfl,1g7k,1xmz}.pdb"







